modules-$(CONFIG_LINUXBOOT) += linuxboot

#linuxboot_version := git
#linuxboot_repo := https://github.com/osresearch/linuxboot

linuxboot_version := b5376a441e8e85cbf722e943bb8294958e87c784
linuxboot_hash := ccbe2a1ce344dd5831a774a038ed619f988029cc123a87202d62f3d0ec7aad62
linuxboot_tar := linuxboot-$(linuxboot_version).tar.gz
linuxboot_url := https://github.com/osresearch/linuxboot/archive/$(linuxboot_version).tar.gz

linuxboot_base_dir := linuxboot-$(linuxboot_version)

# linuxboot builds are specialized on a per-target basis.
# They can be specialized by defining $(CONFIG_LINUXBOOT_BOARD)
# otherwise it is assumed that it will have the same name
# as the Heads BOARD.
linuxboot_board := $(or $(CONFIG_LINUXBOOT_BOARD),$(BOARD))
linuxboot_dir := linuxboot-$(linuxboot_version)/build/$(linuxboot_board)

linuxboot_configure := \
	echo >&2 "Pre-building edk2" ; \
	$(MAKE) \
		-C $(build)/$(linuxboot_base_dir) \
		BOARD=$(linuxboot_board) \
		edk2.force \
	|| exit 1 ; \
	if [ "$(linuxboot_board)" = "qemu" ]; then \
		echo >&2 "Pre-building edk2 OVMF" ; \
		( cd $(build)/$(linuxboot_base_dir)/edk2/OvmfPkg ; \
		./build.sh -n $(CPUS) \
		) || exit 1 ; \
	fi ; \
	touch .config ; \

ifdef CUSTOM
	CUSTOMPWD=$(pwd)/$(CUSTOM)
endif

linuxboot_target := \
	-C $(build)/$(linuxboot_base_dir) \
	BOARD=$(linuxboot_board) \
	KERNEL=$(build)/$(BOARD)/bzImage \
	INITRD=$(build)/$(BOARD)/initrd.cpio.xz \
	CUSTOM=$(CUSTOMPWD) \
	CROSS=$(CROSS) \
	$(if $(CONFIG_LINUXBOOT_ROM), ROM=$(pwd)/$(CONFIG_LINUXBOOT_ROM)) \
	all

#
# Most mainboards will define a ROM file that contains the vendor ROM
# for the image.  Provide a reasonable error if the ROM file doesn't exist.
#
ifneq "$(CONFIG_LINUXBOOT_ROM)" ""
ifneq "y" "$(shell [ -r '$(CONFIG_LINUXBOOT_ROM)' ] && echo y)"
$(error $(CONFIG_LINUXBOOT_ROM): you must provide a ROM file)
endif

endif


# The output file from the LinuxBoot build is a full ROM
# ready to flash onto the mainboard.  There might be partial
# firmware volumes as well, but that depends on the board
# so this only retrieves the final one
linuxboot_output := build/$(linuxboot_board)/linuxboot.rom
linuxboot_rom := $(build)/$(linuxboot_dir)/$(linuxboot_output)

ifneq ($(CONFIG_LINUXBOOT),)
$(build)/$(BOARD)/$(LB_OUTPUT_FILE): $(build)/$(linuxboot_dir)/.build
	$(call do-copy,$(dir $<)linuxboot.rom,$@)
	@touch $@
endif

# Also force a rebuild if any of the input files are updated
$(build)/$(linuxboot_dir)/.build: \
	$(CONFIG_LINUXBOOT_ROM) \
	$(build)/$(BOARD)/bzImage \
	$(build)/$(BOARD)/initrd.cpio.xz \


linuxboot.run: $(build)/$(BOARD)/$(LB_OUTPUT_FILE)
	$(MAKE) -C $(build)/$(linuxboot_base_dir)  \
		BOARD:=$(linuxboot_board) \
		KERNEL=$(build)/$(BOARD)/bzImage \
		INITRD=$(build)/$(BOARD)/initrd.cpio.xz \
		CUSTOM=$(CUSTOMPWD) \
		run

# If we are not building from a git checkout,
# we must also download the linuxboot-edk2 tree
ifneq "$(linuxboot_version)" "git"

linuxboot_depends += linuxboot-edk2
modules-$(CONFIG_LINUXBOOT) += linuxboot-edk2

linuxboot-edk2_version := b7c299e4799012e8a20958a68693ab95b7626aa9
linuxboot-edk2_hash := 78f48f46414b019b5fcd2d7049fd79e955d25f2965123d0bbdf7226564db33e5

linuxboot-edk2_tar := linuxboot-edk2-$(linuxboot-edk2_version).tar.gz
linuxboot-edk2_url := https://github.com/linuxboot/edk2/archive/$(linuxboot-edk2_version).tar.gz
linuxboot-edk2_dir := $(linuxboot_base_dir)/edk2

# We don't need to build edk2 ourselves
# It will be done as part of the linuxboot build process
linuxboot-edk2_output := .git
linuxboot-edk2_target := .git
linuxboot-edk2_configure := echo -e '\n.git:\n\ttouch .git' >> Makefile

endif
