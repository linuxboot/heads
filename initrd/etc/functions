#!/bin/sh
# Shell functions for most initialization scripts

die() {
	echo >&2 "$*";
	read -p 'Hit enter to continue.'
	exit 1;
}

debug(){
  echo >&2 "$*";
  read -p 'Hit enter to continue.'
}

notify(){
  echo >&2 "$*";
  read -p 'Hit enter to continue.'
}

error() {
	echo >&2 "$*";
  exit 1;
}

warn() {
	echo >&2 "$*";
}

recovery() {
	echo >&2 "!!!!! $*"

	# Remove any temporary secret files that might be hanging around
	# but recreate the directory so that new tools can use it.
	shred -n 10 -z -u /tmp/secret/* 2> /dev/null
	rm -rf /tmp/secret
	mkdir -p /tmp/secret

	# ensure /tmp/config exists for recovery scripts that depend on it
	touch /tmp/config

	if [ "$CONFIG_TPM" = y ]; then
		tpm extend -ix 4 -ic recovery
	fi
	echo >&2 "!!!!! Starting recovery shell"
	sleep 1

	if [ -x /bin/setsid ]; then
		exec /bin/setsid -c /bin/ash
	else
		exec /bin/ash
	fi
}

pause_recovery() {
	read -p 'Hit enter to proceed to recovery shell:'
	recovery $*
}

pcrs() {
	head -8 /sys/class/tpm/tpm0/pcrs
}

confirm_totp()
{
	prompt="$1"
	last_half=X
	unset totp_confirm

	while true; do

		# update the TOTP code every thirty seconds
		date=`date "+%Y-%m-%d %H:%M:%S"`
		seconds=`date "+%s"`
		half=`expr \( $seconds % 60 \) / 30`
		if [ "$CONFIG_TPM" != y ]; then
			TOTP="NO TPM"
		elif [ "$half" != "$last_half" ]; then
			last_half=$half;
			TOTP=`unseal-totp` \
			|| recovery "TOTP code generation failed"
		fi

		echo -n "$date $TOTP: "

		# read the first character, non-blocking
		read \
			-t 1 \
			-n 1 \
			-s \
			-p "$prompt" \
			totp_confirm \
		&& break

		# nothing typed, redraw the line
		echo -ne '\r'
	done

	# clean up with a newline
	echo
}

enable_usb()
{
	if [ "$CONFIG_LINUX_USB_COMPANION_CONTROLLER" = y ]; then
		if ! lsmod | grep -q uhci_hcd; then
			insmod /lib/modules/uhci-hcd.ko \
			|| die "uhci_hcd: module load failed"
		fi
		if ! lsmod | grep -q ohci_hcd; then
			insmod /lib/modules/ohci-hcd.ko \
			|| die "ohci_hcd: module load failed"
		fi
		if ! lsmod | grep -q ohci_pci; then
			insmod /lib/modules/ohci-pci.ko \
			|| die "ohci_pci: module load failed"
		fi
	fi
	if ! lsmod | grep -q ehci_hcd; then
		insmod /lib/modules/ehci-hcd.ko \
		|| die "ehci_hcd: module load failed"
	fi
	if ! lsmod | grep -q ehci_pci; then
		insmod /lib/modules/ehci-pci.ko \
		|| die "ehci_pci: module load failed"
	fi
	if ! lsmod | grep -q xhci_hcd; then
		insmod /lib/modules/xhci-hcd.ko \
		|| die "xhci_hcd: module load failed"
	fi
	if ! lsmod | grep -q xhci_pci; then
		insmod /lib/modules/xhci-pci.ko \
		|| die "xhci_pci: module load failed"
		sleep 2
	fi
}

file_selector() {
  FILE=""
  FILE_LIST=$1
  MENU_MSG=${2:-"Choose the file"}
  # create file menu options
  if [ $(cat "$FILE_LIST" | wc -l) -gt 0 ]; then
    option=""
    while [ -z "$option" ]
    do
      MENU_OPTIONS=""
      n=0
      while read option
      do
        n=$(expr $n + 1)
        option=$(echo "$option" | tr " " "_")
        MENU_OPTIONS="$MENU_OPTIONS $n ${option}"
      done < $FILE_LIST

      MENU_OPTIONS="$MENU_OPTIONS a Abort"
      whiptail --clear --title "Select your File" \
        --menu "${MENU_MSG} [1-$n, a to abort]:" 20 120 8 \
        -- $MENU_OPTIONS \
        2>/tmp/whiptail || die "Aborting"

      option_index=$(cat /tmp/whiptail)

      if [ "$option_index" = "a" ]; then
        option="a"
        return
      fi

      option=$(head -n "$option_index" "$FILE_LIST" | tail -1)
      if [ "$option" == "a" ]; then
        return
      fi
    done
    if [ -n "$option" ]; then
      FILE=$option
    fi
  else
    whiptail $CONFIG_ERROR_BG_COLOR --title 'ERROR: No Files Found' \
      --msgbox "No Files found matching the pattern. Aborting." 16 60
    exit 1
  fi
}

mount_boot()
{
  # Mount local disk if it is not already mounted
  if ! grep -q /boot /proc/mounts ; then
    mount -o ro /boot \
      || recovery "Unable to mount /boot from $CONFIG_BOOT_DEV"
  fi
}

confirm_gpg_card()
{
	read \
		-n 1 \
		-p "Please confirm that your GPG card is inserted [Y/n]: " \
		card_confirm
	echo

	if [ "$card_confirm" != "y" \
		-a "$card_confirm" != "Y" \
		-a -n "$card_confirm" ] \
	; then
		die "gpg card not confirmed"
	fi

	# setup the USB so we can reach the GPG card
	enable_usb

	gpg --card-status \
	|| die "gpg card read failed"
}

check_tpm_counter()
{
  LABEL=${2:-3135106223}
	# if the /boot.hashes file already exists, read the TPM counter ID
	# from it.
	if [ -r "$1" ]; then
		TPM_COUNTER=`grep counter- "$1" | cut -d- -f2`
  else 
    warn "$1 does not exist; creating new TPM counter"
    if [ -z "$oem_TPM_Owner_Password" ]; then
		  read -s -p "TPM Owner password: " tpm_password
		  echo
    else
      tpm_password=$(echo -n "$oem_TPM_Owner_Password")
    fi

		tpm counter_create \
			-pwdo "$tpm_password" \
			-pwdc '' \
			-la $LABEL \
		| tee /tmp/counter \
		|| die "Unable to create TPM counter"
		TPM_COUNTER=`cut -d: -f1 < /tmp/counter`
	fi

	if [ -z "$TPM_COUNTER" ]; then
		die "$1: TPM Counter not found?"
	fi
}

read_tpm_counter()
{
	tpm counter_read -ix "$1" | tee "/tmp/counter-$1" \
	|| die "Counter read failed"
}

increment_tpm_counter()
{
	tpm counter_increment -ix "$1" -pwdc '' \
		| tee /tmp/counter-$1 \
	|| die "Counter increment failed"
}

check_config() {
	if [ ! -d /tmp/kexec ]; then
		mkdir /tmp/kexec \
		|| die 'Failed to make kexec tmp dir'
	else
		rm -rf /tmp/kexec/* \
		|| die 'Failed to empty kexec tmp dir'
	fi

	if [ ! -r $1/kexec.sig ]; then
		return
	fi

	if [ `find $1/kexec*.txt | wc -l` -eq 0 ]; then
		return
	fi

	if [ "$2" != "force" ]; then
		if ! sha256sum `find $1/kexec*.txt` | gpgv $1/kexec.sig - ; then
			die 'Invalid signature on kexec boot params. Investigate/Update checksums and sign all files in /boot.'
      #TODO: Show which files failed integrity check! copy logic from gui-init kexec-select-boot verify_global_hashes()
      # Note: not here to do but in gui-init. But generic-init is lacking such info.
		fi
	fi

	echo "+++ Found verified kexec boot params"
	cp $1/kexec*.txt /tmp/kexec \
	|| die "Failed to copy kexec boot params to tmp"
}

preserve_rom() {
	new_rom="$1"
	old_files=`cbfs -t 50 -l 2>/dev/null | grep "^heads/"`

	for old_file in `echo $old_files`; do
		new_file=`cbfs -o $1 -l | grep -x $old_file`
		if [ -z "$new_file" ]; then
			echo "+++ Adding $old_file to $1"
			cbfs -t 50 -r $old_file >/tmp/rom.$$ \
			|| die "Failed to read cbfs file from ROM"
			cbfs -o $1 -a $old_file -f /tmp/rom.$$ \
			|| die "Failed to write cbfs file to new ROM file"
		fi
	done
}
replace_config() {
	CONFIG_FILE=$1
	CONFIG_OPTION=$2
	NEW_SETTING=$3

	touch $CONFIG_FILE
# first pull out the existing option from the global config and place in a tmp file
	awk "gsub(\"^export ${CONFIG_OPTION}=.*\",\"export ${CONFIG_OPTION}=\\\"${NEW_SETTING}\\\"\")" /tmp/config > ${CONFIG_FILE}.tmp
	awk "gsub(\"^${CONFIG_OPTION}=.*\",\"${CONFIG_OPTION}=\\\"${NEW_SETTING}\\\"\")" /tmp/config >> ${CONFIG_FILE}.tmp

# then copy any remaining settings from the existing config file, minus the option you changed
	grep -v "^export ${CONFIG_OPTION}=" ${CONFIG_FILE} | grep -v "^${CONFIG_OPTION}=" >> ${CONFIG_FILE}.tmp || true
  sort ${CONFIG_FILE}.tmp | uniq > ${CONFIG_FILE}
	rm -f ${CONFIG_FILE}.tmp
}
combine_configs() {
	cat /etc/config* > /tmp/config
}
read_oem_files()
{
  oem_name=$(grep "oem_name" /boot/oem | awk -F '=' {'print $2'})
  if [ -n "$oem_name" ]; then
    export oem_name="$oem_name"
  else
    oem_name="your OEM"
    export oem_name="$oem_name"
  fi
 
  if ! [ $(grep "no_automatic_provisioning" /boot/oem) ]; then
    echo "Mounting memory card reader drive provision OEM reownership from /media/oem-provisioning..."
    mount-sdcard || notify "Unable to mount sdcard from memory card reader. Make sure the card is pushed in the expension slot and type Enter to continue."
    mount-sdcard || $(mount -o remount,rw /boot && echo "no_automatic_provisioning" >> /boot/oem && mount -o remount,ro /boot && reboot)
    if [ -e /media/oem-provisioning ]; then
      echo "Found /media/oem-provisioning. Parsing..."
      oem_gpg_Admin_PIN=$(grep "^oem_gpg_Admin_PIN=" /media/oem-provisioning | cut -d "=" -f2)
      oem_gpg_Admin_PIN_count=$(echo "$oem_gpg_Admin_PIN" | wc -l )
      if [ -n "$oem_gpg_Admin_PIN" ]; then
        if [ $oem_gpg_Admin_PIN_count -eq 1 ]; then
          export oem_gpg_Admin_PIN="$oem_gpg_Admin_PIN"
        elif [ $oem_gpg_Admin_PIN_count -gt 1 ]; then
          warn "Multiple 'oem_gpg_Admin_PIN=' statements found. None retained."
          unset oem_gpg_Admin_PIN
          error=1
        fi
      else
        warn "No 'oem_gpg_Admin_PIN=' statement found."
        prompt_user_provisioning=1
      fi

      oem_gpg_User_PIN=$(grep "^oem_gpg_User_PIN=" /media/oem-provisioning | cut -d "=" -f2) 
      oem_gpg_User_PIN_count=$(echo "$oem_gpg_User_PIN" | wc -l )
      if [ -n "$oem_gpg_User_PIN" ]; then
        if [ $oem_gpg_User_PIN_count -eq 1 ]; then
          export oem_gpg_User_PIN="$oem_gpg_User_PIN"
        elif [ $oem_gpg_User_PIN_count -gt 1 ]; then
          warn "Multiple 'oem_gpg_Admin_PIN=' statements found. None retained."
          unset oem_gpg_User_PIN
          error=1
        fi
      else
        warn "No 'oem_gpg_User_PIN=' statement found."
        prompt_user_provisioning=1
      fi

      oem_gpg_real_name=$(grep "^oem_gpg_real_name=" /media/oem-provisioning | cut -d "=" -f2)
      oem_gpg_real_name_count=$(echo "$oem_gpg_real_name" | wc -l )
      if [ -n "$oem_gpg_real_name" ]; then
        if [ $oem_gpg_real_name_count -eq 1 ]; then
          export oem_gpg_real_name="$oem_gpg_real_name"
        elif [ $oem_gpg_real_name_count -gt 1 ]; then
          warn "Multiple 'oem_gpg_real_name=' statements found. None retained."
          unset oem_gpg_real_name
          error=1
        fi
      else
        warn "No 'oem_gpg_real_name=' statement found."
        prompt_user_provisioning=1
      fi

      oem_gpg_email=$(grep "^oem_gpg_email=" /media/oem-provisioning | cut -d "=" -f2)
      oem_gpg_email_count=$(echo "$oem_gpg_email" | wc -l )
      if [ -n "$oem_gpg_email" ]; then
        if [ $oem_gpg_email_count -eq 1 ]; then
          export oem_gpg_email="$oem_gpg_email"
        elif [ $oem_gpg_email_count -gt 1 ]; then
          warn "Multiple 'oem_gpg_email=' statements found. None retained."
          unset oem_gpg_email
          error=1
        fi
      else
        warn "No 'oem_gpg_email=' statement found."
        prompt_user_provisioning=1
      fi

      oem_gpg_comment=$(grep "^oem_gpg_comment=" /media/oem-provisioning | cut -d "=" -f2)
      oem_gpg_comment_count=$(echo "$oem_gpg_comment" | wc -l )
      if [ -n "$oem_gpg_comment" ]; then
        if [ $oem_gpg_comment_count -eq 1 ]; then
          export oem_gpg_comment="$oem_gpg_comment"
        elif [ $oem_gpg_comment -gt 1 ]; then
          warn "Multiple 'oem_gpg_comment=' statements found. None retained."
          unset oem_gpg_comment
          error=1
        fi
      else
        warn "No 'oem_gpg_comment=' statement found."
        prompt_user_provisioning=1
      fi

      oem_luks_actual_Disk_Recovery_Key=$(grep "^oem_luks_actual_Disk_Recovery_Key=" /media/oem-provisioning | cut -d "=" -f2)
      oem_luks_actual_Disk_Recovery_Key_count=$(echo "$oem_luks_actual_Disk_Recovery_Key" | wc -l )
      if [ -n "$oem_luks_actual_Disk_Recovery_Key" ]; then
        if [ $oem_luks_actual_Disk_Recovery_Key_count -eq 1 ]; then
          export oem_luks_actual_Disk_Recovery_Key="$oem_luks_actual_Disk_Recovery_Key"
        elif [ $oem_luks_actual_Disk_Recovery_Key_count -gt 1 ]; then
          warn "Multiple 'oem_luks_actual_Disk_Recovery_Key=' statements found. None retained."
          unset oem_luks_actual_Disk_Recovery_Key
          error=1
        fi
      else
        warn "No 'oem_luks_actual_Disk_Recovery_Key=' statement found."
        prompt_user_provisioning=1
      fi

      oem_luks_new_Disk_Recovery_Key=$(grep "^oem_luks_new_Disk_Recovery_Key=" /media/oem-provisioning | cut -d "=" -f2)
      oem_luks_new_Disk_Recovery_Key_count=$(echo "$oem_luks_new_Disk_Recovery_Key" | wc -l )
      if [ -n "$oem_luks_new_Disk_Recovery_Key" ]; then
        if [ $oem_luks_new_Disk_Recovery_Key_count -eq 1 ]; then
          export oem_luks_new_Disk_Recovery_Key="$oem_luks_new_Disk_Recovery_Key"
        elif [ $oem_luks_new_Disk_Recovery_Key_count -gt 1 ]; then
          warn "Multiple 'oem_luks_new_Disk_Recovery_Key=' statements found. None retained."
          unset oem_luks_new_Disk_Recovery_Key
          error=1
        fi
      else
        warn "No 'oem_luks_new_Disk_Recovery_Key=' statement found."
        prompt_user_provisioning=1
      fi

      oem_luks_Disk_Unlock_Key=$(grep "^oem_luks_Disk_Unlock_Key=" /media/oem-provisioning | cut -d "=" -f2)
      oem_luks_Disk_Unlock_Key_count=$(echo "$oem_luks_Disk_Unlock_Key" | wc -l )
      if [ -n "$oem_luks_Disk_Unlock_Key" ]; then
        if [ $oem_luks_Disk_Unlock_Key_count -eq 1 ]; then
          export oem_luks_Disk_Unlock_Key="$oem_luks_Disk_Unlock_Key"
        elif [ $oem_luks_Disk_Unlock_Key_count -gt 1 ]; then
          warn "Multiple 'oem_luks_Disk_Unlock_Key=' statements found. None retained."
          unset oem_luks_Disk_Unlock_Key
          error=1
        fi
      else
        warn "No 'oem_luks_Disk_Unlock_Key=' statement found."
        prompt_user_provisioning=1
      fi

      oem_TPM_Owner_Password=$(grep "^oem_TPM_Owner_Password=" /media/oem-provisioning | cut -d "=" -f2)
      oem_TPM_Owner_Password_count=$(echo "$oem_TPM_Owner_Password" | wc -l )
      if [ -n "$oem_TPM_Owner_Password" ]; then
        if [ $oem_TPM_Owner_Password_count -eq 1 ]; then
          export oem_TPM_Owner_Password="$oem_TPM_Owner_Password"
        elif [ $oem_TPM_Owner_Password_count -gt 1 ]; then
          warn "Multiple 'oem_TPM_Owner_Password=' statements found. None retained."
          unset oem_TPM_Owner_Password
          error=1
        fi
      else
        warn "No 'oem_TPM_Owner_Password=' statement found."
        prompt_user_provisioning=1
      fi

      if [ -n "$error" ] && [ "$error" -eq 1 ]; then
        notify "Please take note of precedent errors detected in /media/oem-provisioning content."
        mount -o remount,rw /media 
        sed -i '/^#/d' /media/oem-provisioning
        sed -i '1i #This is vi Editor.\n#\n#Please delete duplicate values to be fed to the OEM Rownership Wizard.\n#To edit this file, press "i" to enter Insert mode.\n#Delete duplicates and undesired values.\n#Required format is: "to_be_provided_value=value"\n#\n#When done, press the "Esc" escape key\n#Then type ":wq" and press the 'Enter' key.\n#The wizard will then validate you input for length requirements only.\n#\n#\n#' /media/oem-provisioning
        vi /media/oem-provisioning
        sed -i '/^#/d' /media/oem-provisioning
        mount -o remount,ro /media
        unset error
        read_oem_files 
      fi

      if [ -n "$prompt_user_provisioning" ] && [ "$prompt_user_provisioning" -eq 1 ];then

        if (whiptail $CONFIG_WARNING_BG_COLOR --title "OEM Reownership Wizard lacks some provisioning information" \
          --yesno "Would you like to feed the OEM Reownership Wizard once with all required\ninformation to automate its process?\n\n Those will be saved securely on OEM provided USB disk encrypted container.\n\n Provisioning those secrets here will automate Reownership Wizard process.\n  Those information will be stored under /media/oem-provisioning.\n\nOtherwise, you will be prompted to enter them several times manually.\nYou won't either have an external backup of those information in case\nthey were forgotten.\n\nContinue with one time OEM Reownership information provisioning?" 30 90) then
          for to_provision in oem_gpg_Admin_PIN oem_gpg_User_PIN oem_gpg_real_name oem_gpg_email oem_gpg_comment oem_luks_actual_Disk_Recovery_Key oem_luks_new_Disk_Recovery_Key oem_luks_Disk_Unlock_Key oem_TPM_Owner_Password
          do
            provisioned_value=$(eval echo \$$to_provision)
            if [ -z "$provisioned_value" ];then
              echo "$to_provision is not set."
              if [ "$to_provision" == "oem_gpg_Admin_PIN" ]; then
                clear
                echo "$to_provision: GPG Admin PIN"
                echo
                echo "Here chosen GPG Admin PIN will be requested from you under Heads to visually attest integrity measurements on your Librem Key (HOTP)."
                echo "Outside of Heads, your GPG Admin PIN will be prompted from you to manage your Librem Key. (e.g: Change user PIN.)" 
                echo "IMPORTANT: GPG Admin PIN is required to unlock GPG User PIN locked from 3 consecutive bad User PINs."
                echo "If you mistyped your GPG Admin PIN 2 times in a subsequently, MAKE SURE YOUR THIRD ATTEMPT IS VALID by checking oem-provisioning file, created from this Wizard on OEM provided sdcard's encrypted container."
                echo
                echo "IMPORTANT: If the GPG Admin PIN becomes locked in smartcard THE CARD WILL NEED TO BE FACTORY RESETTED!"
                echo "Factory reset of the GPG card deletes everything on it, including your private keys stored in its embedded GPG smartcard."
                echo "Consequently, you won't be able to decrypt previous files and emails with your Librem Key like prior to the reset."
                echo
                echo "There is no need to have a super strong passphrase here, it will be locked after 3 bad attempts in the GPG smartcard itself."
                echo "Better choose a simple, short passphrase that you'll remember forever then one long that would lock yourself off because forgotten."
                echo "Suggested passphrase length: 2 words diceware passphrase."
                randomize_diceware_passphrases_until_chosen_or_manual 2 UpperFirstLetter
                while [[ ${#passphrase} -lt 8 || ${#passphrase} -gt 20 ]]; do
                  echo "We have limitations on Admin PIN: minimal 8 and maximal length of 20 characters"
                  validate_input_passphrases_are_equal
                done
                notify "oem_gpg_Admin_PIN=$passphrase"
                export oem_gpg_Admin_PIN="$passphrase"
              fi
              if [ "$to_provision" == "oem_gpg_User_PIN" ] ;then
                clear
                echo "$to_provision: GPG User PIN"
                echo
                echo "Chosen GPG User PIN will be requested from you from Heads each time a /boot configuration change is detected so you can sign it originated from you. From a QubesOS perspective, upgrading AdminVM (dom0) will most certainly result in Heads requesting you to sign /boot integrity changes."
                echo "Outside of Heads, the chosen GPG User PIN will be prompted from you to sign/encrypt/authenticate with your GPG card."
                echo 
                echo "There is no need to have a super strong passphrase here, it will be locked after 3 bad attempts in the GPG smartcard."
                echo "Suggested length: 2 random words diceware passphrase."
                randomize_diceware_passphrases_until_chosen_or_manual 2 UpperFirstLetter
                while [[ ${#passphrase} -lt 6 || ${#passphrase} -gt 20 ]]; do
                  echo "We have limitations for GPG User PIN: minimal 6 and maximal length of 20 characters"
                  validate_input_passphrases_are_equal
                done
                notify "oem_gpg_User_PIN=$passphrase"
                export oem_gpg_User_PIN="$passphrase"
              fi
              if [ "$to_provision" == "oem_gpg_real_name" ]; then
                clear
                echo "$to_provision: GPG public key associated Real Name"
                echo
                passphrase=""
                while [[ ${#passphrase} -lt 5 || ${#passphrase} -gt 255 ]]; do
                  echo "We have limitations for GPG Real Name: minimal 5 and maximal length of 255 characters"
                  validate_input_passphrases_are_equal
                done
                export oem_gpg_real_name="$passphrase"
              fi
              if [ "$to_provision" == "oem_gpg_email" ]; then
                clear
                echo "$to_provision: GPG public key associated primary E-Mail"
                echo
                passphrase=""
                while ! $(expr "$passphrase" : '.*@' >/dev/null); do
                  echo "Please provide a valid GPG E-Mail format adress (name@domain), even if public key will not associated with any."
                  validate_input_passphrases_are_equal
                done
                export oem_gpg_email="$passphrase"
              fi
              if [ "$to_provision" == "oem_gpg_comment" ]; then
                clear
                echo "$to_provision: GPG public key associated comment" 
                echo
                echo "Differenciates usage of public keys that would be associated with same Real Name and E-Mails addresses if many. (e.g: for E-Mail correspondants)"
                passphrase=""
                while [[ ${#passphrase} -gt 60 ]] || [[ -z "$passphrase" ]]; do
                  echo "We have limitations for GPG public key associated comment: maximal length of 60 characters. Cannot be empty."
                  validate_input_passphrases_are_equal
                done
                export oem_gpg_comment="$passphrase"
              fi
              if [ "$to_provision" == "oem_luks_actual_Disk_Recovery_Key" ]; then
                clear
                echo "$to_provision: actual Disk Recovery Key passphrase"
                echo
                echo "After disks reencryption, you'll have to enter your own, new Disk Recovery Key passphrase to unlock both OEM provided microsd card and internal disks."
                echo
                echo "The actual LUKS Disk Recovery Key passphrase was provided to you from $oem_name. Type it here as provided."
                echo "The actual LUKS Disk Recovery Key passphrase is used to decrypt both microsd and internal disks until reencrypted by this Wizard."
                passphrase=""
                while [[ -z "$passphrase" ]]; do
                  echo "Make sure that this corresponds to the Disk Recovery Key passphrase provided by $oem_name."
                  validate_input_passphrases_are_equal
                done
                notify "oem_luks_actual_Disk_Recovery_Key=$passphrase"
                export oem_luks_actual_Disk_Recovery_Key="$passphrase"
              fi
              if [ "$to_provision" == "oem_luks_new_Disk_Recovery_Key" ]; then
                clear
                echo "$to_provision: new Disk Recovery Key passphrase"
                echo
                echo "Chosen new LUKS recovery Key passphrase NEEDS TO BE REMEMBERED of you at all time!!!"
                echo "LUKS Disk Recovery key Passphrase will be used to decrypt the content of your USB and computer disk content, from any computer."
                echo 
                echo "If forgotten, the content of both $oem_name shipped microsd disk and computer internal disk will be lost forever."
                echo "It is suggested that you pick a diceware passphrase of 6+ words. Make something emotionnaly involving from those words."
                randomize_diceware_passphrases_until_chosen_or_manual 6 UpperFirstLetter
                while [[ ${#passphrase} -lt 25 ]]; do
                  echo "We impose a minimal requirement of 25 characters for LUKS Disk Recovery Passphrase."
                  echo "Remember that a 5 words diceware passphrase would have took 165 days to break in 2013 for the NSA." 
                  echo "A 6 words diceware passphrase would have took 3505 years. Choose carefully following your threat model."
                  echo "Your brain remembers anything that is emotionnaly bonding. Create a story that your brain will remember."
                  validate_input_passphrases_are_equal
                done
                notify "oem_luks_new_Disk_Recovery_Key=$passphrase"
                export oem_luks_new_Disk_Recovery_Key="$passphrase"

              fi
              if [ "$to_provision" == "oem_luks_Disk_Unlock_Key" ] && [ "$CONFIG_TPM" == "y" ] && [ "$CONFIG_OFFER_TPM_LUKS_DISK_UNLOCK_KEY" == "y" ]; then
                clear
                echo "$to_provision: Disk Unlock Key passphrase"
                echo
                echo "Chosen LUKS Disk Unlock Key passphrase will be requested at each boot until the a next OS boot default will be requested from OS upgrade."
                echo "The LUKS Disk Unlock Key is an additional security measure of Heads which permits disk decryption only if the firmware measurements are valid."
                echo "As a consequence, the Disk Unlock Key passphrase is bound to this computer Trusted Platform Module (TPM) only."
                echo "As a result, someone cloning your disk and trying to decrypt its content by typing this Disk Unlock Key passphrase will be unsuccessful."
                echo "If forgotten, no problem. Select a new boot default and you will be prompted to enter chosen Disk Recovery Key Passphrase prior to defining a new Disk Unlock Key passphrase."
                echo
                echo "As opposed to the Disk Recovery Key passphrase, the Disk Unlock Key passphrase can be of a smaller length."
                echo "A diceware randomly selected passphrase of 3 words is more then enough, considering that the TPM is rate limiting the attempts."
                echo "Heads will force the user to boot with the Disk Recovery passphrase after 3 failed attempts on each reboot, making this password practically difficult to bruteforce."
                echo
                randomize_diceware_passphrases_until_chosen_or_manual 3 UpperFirstLetter
                while [[ ${#passphrase} -lt 6 ]]; do
                  echo "We impose a minimal passphrase length of 6 characters."
                  validate_input_passphrases_are_equal
                done
                notify "oem_luks_Disk_Unlock_Key=$passphrase"
                export oem_luks_Disk_Unlock_Key="$passphrase"
              fi
              if [ "$to_provision" == "oem_TPM_Owner_Password" ] && [ "$CONFIG_TPM" == "y" ]; then
                clear
                echo "$to_provision: TPM Owner Passphrase"
                echo
                echo "Chosen TPM Owner Passphrase will never be requested from Heads but in the reownership process to initialize it once."
                echo "A diceware randomly selected passphrase of 2 words is enough."
                echo "It is recommended to reuse GPG Admin Passphrase/Password here, to not unecessarily multiply secrets to remember."
                echo "We reused the GPG Admin PIN to set the TPM Owner Passphrase."
                oem_TPM_Owner_Password="$oem_gpg_Admin_PIN"
                notify "oem_TPM_Owner_Password=$oem_gpg_Admin_PIN"
                export oem_TPM_Owner_Password="$oem_TPM_Owner_Password"
              fi
            else
              echo "$to_provision is $provisioned_value."
            fi
          done

          mount -o remount,rw /media
          env|grep "oem_" | sort > /media/oem-provisioning
          mount -o remount,ro /media

        else
          #Provisiong the wizard once was refused
          mount -o remount,rw /boot
          echo "no_automatic_provisioning" >> /boot/oem
          mount -o remount,ro /boot
        fi
      fi
      export oem_configuration_read=1
      mount -o remount,ro /media
    fi
  else
    warn "'no_automatic_provisioning' flag found under /boot/oem. You'll have to enter provisioning information manually in the OEM Wizard."
  fi
}

check_onboarding_progress()
{
  mount_boot
  if [ -e /boot/oem ]; then
    res=$(grep onboarding /boot/oem 2>&1 > /dev/null)
    if [ $? -ne 0 ];then
      #Show Onboarding menu once.
      whiptail --title 'Hardware reownership Wizard' --msgbox \
       "The received hardware is currently owned by $oem_name.\nWe will change that.\n\nThis Wizard will otherwise make you own your own hardware by:\n1-Reencrypting encrypted drives content (LUKS containers)\n2-Changing their LUKS Disk Recovery Keys and their passphrases\n3-Resetting your Librem Key to factory defaults\n4-Setting User and Admin PINs into your Librem Key\n5-Generating keys into its smartcard, exporting public key and\n importing it in the ROM prior to reprogramming the SPI flash with it\n6-Taking integrity measures of all /boot files and sign the resulting\n checksum file with your Librem Key\n7-Reowning your Trusted Platform Module (TPM)\n\nScan the QR Code with an OTP app only after Reset the TPM last phase.\n\nHit Enter to continue." 20 20
      whiptail --title 'Hardware reownership Wizard' --msgbox \
       "On the next screen, MAKE SURE THAT THE HOTP CODE IS: 'Success'\n\nIf it's not, reboot your hardware with your Librem Key inserted.\n\nIf the HOTP code is still invalid, your hardware may been tampered with in\ntransit. Contact $oem_name." 20 20
      totp_confirm="O"
      echo $totp_confirm > /tmp/whiptail
      mount -o remount,rw /boot
      echo "onboarding" >> /boot/oem
      mount -o remount,ro /boot
    fi
    res=$(grep luks_reencrypted /boot/oem > /dev/null 2>&1)
    if [ $? -ne 0 ];then
      export reownership_state="luks_reencryption"
      totp_confirm="R"
      echo $totp_confirm > /tmp/whiptail
      return
    fi
    res=$(grep luks_passwd_changed /boot/oem > /dev/null 2>&1)
    if [ $? -ne 0 ];then
      export reownership_state="luks_password_change"
      totp_confirm="R"
      return
    fi
    res=$(grep gpg_factory_resetted /boot/oem > /dev/null 2>&1)
    if [ $? -ne 0 ];then
      /bin/factory-reset-libremkey.sh
      return
    fi
    res=$(grep tpm_reowned /boot/oem > /dev/null 2>&1)
    if [ $? -ne 0 ];then
      totp_confirm="p"
      echo $totp_confirm > /tmp/whiptail
      return
    fi
    if [ $(grep -E "luks_reencrypted|luks_passwd_changed|gpg_factory_resetted|tpm_reowned" /boot/oem | uniq | wc -l) -eq 4 ];then
      if [ $HOTP = "Success" ];then
        mount -o remount,rw /boot
        rm /boot/oem
        mount -o remount,ro /boot
        unset totp_confirm
        unset reownership_state
        if [ "$CONFIG_OFFER_TPM_LUKS_DISK_UNLOCK_KEY" = "y" ]; then
          whiptail --title 'DISK UNLOCK KEY ADVICE 1/3' --msgbox \
            "***You SHOULD SET a new Disk Unlock Key for your own data privacy!!!***\n\nDoing so, a witness will only be able to type observed Disk Unlock\n Key passphrase on this computer and won't be able on a cloned\n copy of this disk.\n\nThe release of Disk Unlock Key happens ONLY if TPM attests firmware\nintegrity, and only if Disk Unlock Key passphrase is valid.\n\nPlease hit Enter to continue" 30 60

          whiptail --title 'DISK UNLOCK KEY ADVICE 2/3' --msgbox \
            "Otherwise, typing your Disk Recovery Key passphrase at boot puts you\nat risk. Someone could clone your disk and type that witnessed\npassphrase and access your data both locally and from a cloned\ndisk.\n\nCoupled with a strong passphrase, this improves your data privacy.\nCONSIDER YOURSELF WARNED.\n\nPlease hit Enter to continue" 30 60

          whiptail --title 'DISK UNLOCK KEY ADVICE 3/3' --msgbox \
            "To set Disk Unlock Key, released by the TPM only if firmware integrity\n is attested:\n\nSelect from Main menu:\n\nSettings -> Other Boot Options -> Show OS boot menu\n1-Then select the first boot option proposed (dynamic option)\n2-Then,answer Y when asked to add Disk Unlock Key to the TPM.\n\nYou will be prompted to set one in the following steps.\n\nPlease hit Enter to continue" 30 60
        fi
        return 
      else
        #Deal with corner case where after inserting key in previous step, HOTP seal fails with provided good password.
        #In that case, we regenerate HOTP and TOTP
        totp_confirm="g"
        echo $totp_confirm > /tmp/whiptail
      fi
    fi
  else
    #We just deleted the /boot/oem file and are at the last possible iteration of this function. 
    whiptail --title 'OEM ReOwnership Wizard last step!' --msgbox \
      "Time to set a new boot default and set a Disk Unlock Key passphrase\nAfter this step, you will get to default boot menu.\nOEM reownership will then be completed.\n\nPlease hit Enter to continue" 30 60
    reset_disk_unlock_key
    return
  fi  
}

reset_disk_unlock_key()
{
  mount_boot
  
  if [ "$CONFIG_TPM" = n ]; then
    TOTP="NO TPM"
  else
    TOTP=`unseal-totp`
    if [ $? -ne 0 ]; then
      echo "Error generating TOTP code. We will regenerate it now."
      update_totp
      continue
    elif [ -x /bin/libremkey_hotp_verification ]; then
      HOTP=`unseal-hotp`
      enable_usb
      if ! libremkey_hotp_verification info ; then
        whiptail $CONFIG_WARNING_BG_COLOR --clear --title 'WARNING: Please Insert Your Librem Key' --msgbox "Your Librem Key was not detected.\n\nPlease insert your Librem Key" 30 90
      fi
      # Don't output HOTP codes to screen, so as to make replay attacks harder
      libremkey_hotp_verification check "$HOTP"
      case "$?" in
        0 )
          HOTP="Success"
        ;;
        4 )
          HOTP="Invalid code"
          MAIN_MENU_BG_COLOR=$CONFIG_ERROR_BG_COLOR
        ;;
        * )
          HOTP="Error checking code, Insert Librem Key and retry"
          MAIN_MENU_BG_COLOR=$CONFIG_WARNING_BG_COLOR
        ;;
      esac
    else
      HOTP='N/A'
    fi
      
    if [ $HOTP = "Success" ];then
      mount -o remount,rw /boot
      rm -f /boot/reset_disk_unlock_key
      mount -o remount,ro /boot
      verify_global_hashes
      kexec-select-boot -m -b /boot -c "grub.cfg" -g
      continue
    else
      echo -e "HOTP status: $HOTP\n\nHit Enter to regenerate new TOTP/HOTP codes."
      read
      update_totp
    fi
    continue
  fi
}
randomize_diceware_passphrases_until_chosen_or_manual()
{
  #We generate passwords folowing callers restriction until user chooses to keep it
  keep=0
  unset keep_passphrase

  while [ "$keep" -eq 0 ] &&  [ "$keep" -eq 0 -a "$keep_passphrase" != "m" ]; do
    echo "Generating passphrase..."
    passphrase=$(diceware-eff.sh $1 $2 $3)
    input_ok="n"
    
    while [ "$input_ok" != "y" ]; do
      echo "Generated passphrase is: $passphrase"
      read \
        -n 1 \
        -p "Keep this passphrase (k), generate a new one (n), or enter it manually [k/n/m]: " \
        keep_passphrase
      echo
      if [ "$keep_passphrase" = "k" ] || [ "$keep_passphrase" = "n" ] || [ "$keep_passphrase" = "m" ]; then
        input_ok="y"
      else
        echo "invalid input. Valid choices were: k,n or m."
      fi
    done

    if [ "$keep_passphrase" = "k" ]; then
      keep=1  
    elif [ "$keep_passphrase" = "n" ]; then
      randomize_diceware_passphrases_until_chosen_or_manual $1 $2 $3
    elif [ "$keep_passphrase" = "m" ]; then
      unset passphrase
      echo "It is suggested that you pick EFF diceware words to construct this passphrase."
      echo "Shuffling EFF Diceware dictionary and sampling words out of it..."
      diceware-eff.sh 800 Capitalize
      echo
    fi
    done
}
validate_input_passphrases_are_equal()
{
  passphrase1="1"
  passphrase2="2"
  
  while [ "$passphrase1" != "$passphrase2" ]; do
    read \
      -p "Please type desired value: " \
      passphrase1
    
    read \
      -p "Please retype desired value: " \
      passphrase2
    
    if [ "$passphrase1" != "$passphrase2" ] || [ -z "$passphrase1" ]; then
      echo "Entered value were different. Please type them again so they match."
    else
      passphrase="$passphrase1"
      unset passphrase1
      unset passphrase2
    fi
  done
}
