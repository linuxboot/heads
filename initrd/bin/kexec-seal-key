#!/bin/bash
# This will generate a disk encryption key and seal / encrypt
# with the current PCRs and then store it in the TPM NVRAM.
# It will then need to be bundled into initrd that is booted.
set -e -o pipefail
. /etc/functions

TPM_INDEX=3
TPM_SIZE=312
KEY_FILE="/tmp/secret/secret.key"
TPM_SEALED="/tmp/secret/secret.sealed"
RECOVERY_KEY="/tmp/secret/recovery.key"

. /etc/functions
. /tmp/config

TRACE_FUNC

paramsdir=$1
if [ -z "$paramsdir" ]; then
	die "Usage $0 /boot"
fi

KEY_DEVICES="$paramsdir/kexec_key_devices.txt"
KEY_LVM="$paramsdir/kexec_key_lvm.txt"

if [ ! -r "$KEY_DEVICES" ]; then
	die "No devices defined for disk encryption"
else
	DEBUG "Devices defined for disk encryption: $(cat "$KEY_DEVICES" | cut -d\  -f1 | tr '\n' ' ')"
fi

if [ -r "$KEY_LVM" ]; then
	# Activate the LVM volume group
	VOLUME_GROUP=$(cat $KEY_LVM)
	if [ -z "$VOLUME_GROUP" ]; then
		die "No LVM volume group defined for activation"
	fi
	lvm vgchange -a y $VOLUME_GROUP ||
		die "$VOLUME_GROUP: unable to activate volume group"
else
	DEBUG "No LVM volume group defined for activation"
fi

DEBUG "$(pcrs)"

# LUKS Key slot 0 is the manual recovery pass phrase
# that they user entered when they installed OS,
# key slot 1 is the one that we've generated.  TODO: this description needs to be updated in accordance with the new design from PR 1541
read_LUKS_DRK_passphrase_from_user() {
	read -s -p "Enter LUKS Disk Recovery Key/passphrase: " disk_password
	echo -n "$disk_password" >"$RECOVERY_KEY"
	echo
}

read -s -p "New LUKS TPM Disk Unlock Key passphrase for booting: " key_password
echo
read -s -p "Repeat LUKS TPM Disk Unlock Key passphrase for booting: " key_password2
echo

if [ "$key_password" != "$key_password2" ]; then
	die "Key passphrases do not match"
fi

# Generate key file
echo "++++++ Generating new randomized 128 bytes key file that will be sealed/unsealed by LUKS TPM Disk Unlock Key passphrase"
dd \
	if=/dev/urandom \
	of="$KEY_FILE" \
	bs=1 \
	count=128 \
	2>/dev/null ||
	die "Unable to generate 128 random bytes"

for dev in $(cat "$KEY_DEVICES" | cut -d\  -f1); do
	for tries in 1 2 3; do
		read_LUKS_DRK_passphrase_from_user
		DEBUG "Testing $RECOVERY_KEY keyfile created from provided passphrase against $dev"
		if ! cryptsetup luksOpen --test-passphrase --key-file "$RECOVERY_KEY" $dev; then
			if [ $tries == 3 ]; then
				die "Failed to unlock $dev with provided passphrase 3 times. Exiting..."
			fi
			warn "$dev: Unable to unlock LUKS device with provided passphrase. Try again (CAPS LOCK on?)."
		fi
	done

	# We will use the following regex to find the slots that are enabled
	regex="Slot ([0-9]+): ENABLED|\b([0-9]+): luks2"

	# good_slot will be the slot number where the passphrase was tested against as valid. We will keep that slot
	good_slot=-1

	# test each possible existing key slot of dev against keyfile $RECOVERY_KEY
	for slot in $(cryptsetup luksDump "$dev" | grep -E "$regex" | sed -r 's/Slot ([0-9]+): ENABLED|\b([0-9]+): luks2/\1\2/'); do
		if [ "$good_slot" -eq "-1" ]; then
			if cryptsetup luksOpen --test-passphrase --key-file "$RECOVERY_KEY" $dev $slot; then
				good_slot="$slot"
				break;
			fi
		fi
	done

	# if we found a good slot, we wipe all the other slots on current $dev
	for slot in $(cryptsetup luksDump "$dev" | grep -E "$regex" | sed -r 's/Slot ([0-9]+): ENABLED|\b([0-9]+): luks2/\1\2/'); do
		if [ "$slot" -ne "$good_slot" ]; then
			#set wipe_desired to no by default
			wipe_desired="no"

			if [ "$slot" -ne "1" ] && [ "$slot" -ne "8" ]; then
				# Heads expects key-slot 1 or 8 to be used for TPM DUK setup. Ask user to confirm with big fat warning
				read -p "WARNING: LUKS key-slot $slot is not typically used for TPM Disk Unlock Key setup. Are you sure you want to wipe it? [y/N] " -n 1 -r
				# If user does not confirm, skip this slot
				if [[ ! $REPLY =~ ^[Yy]$ ]]; then
					wipe_desired="yes"
				fi
			else
				# If slot is 1 or 8, we wipe it without asking since not DRK's good keyslot
				wipe_desired="yes"
			fi
			
			if [ "$wipe_desired" == "yes" ]; then
				echo "++++++ $dev: Wiping LUKS key-slot $slot"
				cryptsetup luksKillSlot \
					--key-file "$RECOVERY_KEY" \
					$dev $slot ||
					warn "$dev: removal of LUKS slot $slot failed: Continuing"
			fi
		fi
	done

	# We then add the new key to the luks key slot 8
	for dev in $(cat "$KEY_DEVICES" | cut -d\  -f1); do
		echo "++++++ $dev: Adding LUKS TPM Disk Unlock Key to LUKS key-slot 8"
		cryptsetup luksAddKey \
			--key-file "$RECOVERY_KEY" \
			--new-key-slot 8 \
			$dev "$KEY_FILE" > /dev/null 2>&1||
			die "$dev: Unable to add LUKS TPM Disk Unlock Key to LUKS key-slot #8"
	done
done

# Now that we have setup the new keys, measure the PCRs
# We don't care what ends up in PCR 6; we just want
# to get the /tmp/luksDump.txt file.  We use PCR16
# since it should still be zero
cat "$KEY_DEVICES" | cut -d\  -f1 | xargs /bin/qubes-measure-luks ||
	die "Unable to measure the LUKS headers"

pcrf="/tmp/secret/pcrf.bin"
tpmr pcrread 0 "$pcrf"
tpmr pcrread -a 1 "$pcrf"
tpmr pcrread -a 2 "$pcrf"
tpmr pcrread -a 3 "$pcrf"
# Note that PCR 4 needs to be set with the "normal-boot" path value, read it from event log.
tpmr calcfuturepcr 4 >>"$pcrf"
if [ "$CONFIG_USER_USB_KEYBOARD" = "y" -o -r /lib/modules/libata.ko -o -x /bin/hotp_verification ]; then
	DEBUG "Sealing LUKS TPM Disk Unlock Key with PCR5 involvement (additional kernel modules are loaded per board config)..."
	# Here, we take pcr 5 into consideration if modules are expected to be measured+loaded
	tpmr pcrread -a 5 "$pcrf"
else
	DEBUG "Sealing LUKS TPM Disk Unlock Key with PCR5=0 (NO additional kernel modules are loaded per board config)..."
	#no kernel modules are expected to be measured+loaded
	tpmr calcfuturepcr 5 >>"$pcrf"
fi
# Precompute the value for pcr 6
DEBUG "Precomputing TPM future value for PCR6 sealing/unsealing of LUKS TPM Disk Unlock Key..."
tpmr calcfuturepcr 6 "/tmp/luksDump.txt" >>"$pcrf"
# We take into consideration user files in cbfs
tpmr pcrread -a 7 "$pcrf"

DO_WITH_DEBUG --mask-position 7 \
	tpmr seal "$KEY_FILE" "$TPM_INDEX" 0,1,2,3,4,5,6,7 "$pcrf" \
	"$TPM_SIZE" "$key_password" || die "Unable to write LUKS TPM Disk Unlock Key to NVRAM"

# should be okay if this fails
shred -n 10 -z -u "$pcrf" 2>/dev/null ||
	warn "Failed to delete pcrf file - continuing"
shred -n 10 -z -u "$KEY_FILE" 2>/dev/null ||
	warn "Failed to delete key file - continuing"

mount -o rw,remount $paramsdir || warn "Failed to remount $paramsdir in RW - continuing"
cp -f /tmp/luksDump.txt "$paramsdir/kexec_lukshdr_hash.txt" ||
	warn "Failed to copy LUKS header hashes to /boot - continuing"
mount -o ro,remount $paramsdir || warn "Failed to remount $paramsdir in RO - continuing"
