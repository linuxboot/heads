#!/bin/sh
# Save these options to be the persistent default
set -e -o pipefail
. /tmp/config
. /etc/functions

while getopts "b:d:p:i:" arg; do
  case $arg in
    b) bootdir="$OPTARG" ;;
    d) paramsdev="$OPTARG" ;;
    p) paramsdir="$OPTARG" ;;
    i) index="$OPTARG" ;;
  esac
done

if [ -z "$bootdir" -o -z "$index" ]; then
  die "Usage: $0 -b /boot -i menu_option "
fi

if [ -z "$paramsdev" ]; then
  paramsdev="$bootdir"
fi

if [ -z "$paramsdir" ]; then
  paramsdir="$bootdir"
fi

bootdir="${bootdir%%/}"
paramsdev="${paramsdev%%/}"
paramsdir="${paramsdir%%/}"

TMP_MENU_FILE="/tmp/kexec/kexec_menu.txt"
ENTRY_FILE="$paramsdir/kexec_default.$index.txt"
HASH_FILE="$paramsdir/kexec_default_hashes.txt"

KEY_DEVICES="$paramsdir/kexec_key_devices.txt"
KEY_LVM="$paramsdir/kexec_key_lvm.txt"


lvm_suggest=$(lvm vgscan|awk -F '"' {'print $1'}|tail -n +2)
num_lvm=$(echo "$lvm_suggest"|wc -l)
if [ "$num_lvm" -eq 1 ] && [ -n "$lvm_suggest" ]; then
  lvm_volume_group=$lvm_suggest
elif [ -z "$lvm_suggest" ]; then
  num_lvm=0
fi

devices_suggest=$(blkid | cut -d ':' -f 1 | while read device;do cryptsetup isLuks "$device";if [ $(echo $?) == 0 ]; then echo "$device";fi; done | sort)
#TODO: shall we remove mmc device (OEM provisioning device) from encrypted boot device selection?
#devices_suggest_without_mmc=$(echo $devices_suggest|grep -v "mmc")
#devices_suggest="$devices_suggest_without_mmc"
#NOW: mitgated by taking prior existing envrypted devices.
#Requires the OEM to set a LUKS Disk Unlock passphrase, which outputs current encrypted device under /boot/kexec_key_devices
num_devices=$(echo "$devices_suggest"|wc -l)

if [ "$num_devices" -eq 1 ] && [ -s "$devices_suggest" ]; then
  key_devices=$devices_suggest
else
  devices_suggest=$(echo $devices_suggest)
fi

if [ "$num_lvm" -eq 0 ] && [ "$num_devices" -eq 0 ]; then
  #No encrypted partition found.
  no_encrypted_partition=1
fi

if [ ! -r "$TMP_MENU_FILE" ]; then
  die "No menu options available, please run kexec-select-boot"
fi

entry=$(head -n "$index" $TMP_MENU_FILE | tail -1)
if [ -z "$entry" ]; then
  die "Invalid menu index $index"
fi

save_key="n"

if [ "$CONFIG_TPM" = "y" ] && [ "$CONFIG_OFFER_TPM_LUKS_DISK_UNLOCK_KEY" = "y" ] && [ "$no_encrypted_partition" != "1" ]; then
  #Go forward and propose to seal Disk Unlock Key with TPM only if at least a disk encrypted partition was found.
  if [ ! -s "$KEY_DEVICES" ]; then
    read \
      -n 1 \
      -p "Do you wish to add a Disk Unlock Key to the TPM [Y/n]: " \
      add_key_confirm
    echo

    if [ "$add_key_confirm" = "y" ] || [ "$add_key_confirm" = "Y" ] || [ -z "$add_key_confirm" ]; then
      save_key="y"
    else
      warn "User chose to not add Disk Unlock Key to the TPM. It can be done manually later on by selecting a new default boot option."
    fi
  else
    read \
      -n 1 \
      -p "Do you want to reseal a Disk Unlock Key to the TPM [Y/n]: " \
      change_key_confirm
    echo

    if [ "$change_key_confirm" = "y" ] || [ "$change_key_confirm" = "Y" ] || [ -z "$change_key_confirm" ]; then
      old_lvm_volume_group=""
      if [ -r "$KEY_LVM" ]; then
        old_lvm_volume_group=$(cat "$KEY_LVM") || true
        old_key_devices=$(cat "$KEY_DEVICES" \
        | cut -d\  -f1 \
        | grep -v "$old_lvm_volume_group" \
        | xargs) || true
      else
        old_key_devices=$(cat "$KEY_DEVICES" \
        | cut -d\  -f1 | xargs) || true
      fi

      lvm_suggest="$old_lvm_volume_group"
      devices_suggest="$old_key_devices"
      save_key="y"
    else
      echo -e "\n\nTo set a new Disk Unlock Key passphrase, different then Disk Recovery Key passphrase, resealing the Disk Unlock key to the TPM is needed.\n\nThe actual default boot option have been invalidated by a firmware upgrade or a firmware tampering.\nIf you are the origin of the change, you have already resealed TOTP/HOTP, prompted from TPM measurements mismatches.\n\nIt is strongly advised to set a new default boot option, which will add the Disk Unlock Key to the TPM.\n\nThe Disk Unlock Key passphrase you will choose at this step will be required of you at each machine startup and will protect the Disk Recovery Key passphrase from interested eyes.\n\nBy selecting a Disk Unlock Key passphrase, a camera that would see you type your Disk Unlock Key passphrase will only be able to access the content of your hard drive on this computer.\n\nMore critically, someone knowing your Disk Recovery Key passphrase would just have to clone your disk (which takes 30 minutes) and be able to access its content from any other computer later on.\nConsider yourself warned.\n"
      die "User refused to reseal the Disk Unlock Key to the TPM"
    fi
  fi

  if [ "$save_key" = "y" ]; then
    if [ -n "$old_key_devices" ] || [ -n "$old_lvm_volume_group" ]; then
      read \
        -n 1 \
        -p "Do you want to reuse configured Encrypted LVM groups/Block devices? (Y/n):" \
        reuse_past_devices
       echo
      if [ "$reuse_past_devices" = "y" ] || [ "$reuse_past_devices" = "Y" ] || [ -z "$reuse_past_devices" ]; then
        if [ -z "$key_devices" ] && [ -n "$old_key_devices" ]; then
          key_devices="$old_key_devices"
        fi
        if [ -z "$lvm_volume_group" ] && [ -n "$old_lvm_volume_group" ]; then
          lvm_volume_group="$old_lvm_volume_group"
        fi
      fi
    else
      if [ "$num_lvm" -gt 1 ]; then
        //untested
        selected_lvmdev_not_existing=1
        while [ $selected_lvmdev_not_existing -ne 0 ];do
        {
          read \
            -p "Encrypted LVM group? choose between: $lvm_suggest: " \
            lvm_volume_group

          result=$(echo "$lvm_suggest" | grep -q "$lvm_volume_group") || selected_lvmdev_not_existing=1
          if [ $? == 0 ]; then
            selected_lvmdev_not_existing=0
          fi
        };done
      elif [ "$num_lvm" -eq 1 ] && [ -s $lvm_suggest ]; then
        echo "Single Encrypted LVM group found at $lvm_suggest."
        lvm_volume_group=$lvm_suggest
      else
        echo "No encrypted LVM Group found."
      fi

      if [ "$num_devices" -gt 1 ]; then
        selected_luksdev_not_existing=1
        while [ $selected_luksdev_not_existing -ne 0 ];do
        {
          read \
          -p "Encrypted devices? (choose between: $devices_suggest): " \
          key_devices

          result=$(echo "$devices_suggest" | grep -q "$key_devices") || selected_luksdev_not_existing=1
          if [ $? == 0 ]; then
            selected_luksdev_not_existing=0
          fi
        };done
      elif [ "$num_devices" -eq 1 ]; then
        echo "Single Encrypted Disk found at $devices_suggest."
        key_devices=$devices_suggest
      else
        echo "No encrypted devices found."
      fi
    fi 

    save_key_params="-s -p $paramsdev"
    if [ -n "$lvm_volume_group" ]; then
      save_key_params="$save_key_params -l $lvm_volume_group $key_devices"
    elif [ -n "$key_devices" ]; then
      save_key_params="$save_key_params $key_devices"
    else
      die "No LVM Group nor encrypted devices provided."
    fi

    echo -e "\nRunning kexec-save-key with params: $save_key_params\n"
    kexec-save-key $save_key_params \
    || die "Failed to save the Disk Unlock Key"
  fi  
fi

# try to switch to rw mode
mount -o rw,remount $paramsdev

if [ ! -d $paramsdir ]; then
  mkdir -p $paramsdir \
  || die "Failed to create params directory"
fi
rm "$paramsdir/kexec_default.*.txt" 2>/dev/null || true
echo "$entry" > $ENTRY_FILE
cd $bootdir && kexec-boot -b "$bootdir" -e "$entry" -f | \
  xargs sha256sum > $HASH_FILE \
|| die "Failed to create hashes of boot files"
if [ ! -r $ENTRY_FILE -o ! -r $HASH_FILE ]; then
  die "Failed to write default config"
fi

# sign and auto-roll config counter
extparam=
if [ "$CONFIG_TPM" = "y" ]; then
  extparam=-u
fi
kexec-sign-config -p $paramsdir $extparam \
|| die "Failed to sign default config"

# switch back to ro mode
mount -o ro,remount $paramsdev
