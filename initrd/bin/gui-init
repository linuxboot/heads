#!/bin/sh
# Boot from a local disk installation

BOARD_NAME=${CONFIG_BOARD_NAME:-${CONFIG_BOARD}} 
MAIN_MENU_TITLE="${BOARD_NAME} | Heads Boot Menu"
export BG_COLOR_WARNING="${CONFIG_WARNING_BG_COLOR:-"--background-gradient 0 0 0 150 125 0"}"
export BG_COLOR_ERROR="${CONFIG_ERROR_BG_COLOR:-"--background-gradient 0 0 0 150 0 0"}"
export BG_COLOR_MAIN_MENU=""

. /etc/gui_functions

show_main_menu()
{
  date=`date "+%Y-%m-%d %H:%M"`
  whiptail $BG_COLOR_MAIN_MENU --clear --title "$MAIN_MENU_TITLE" \
    --menu "$date\nTOTP: $TOTP | HOTP: $HOTP" 20 90 10 \
    'd' ' Default boot' \
    'r' ' Refresh TOTP/HOTP' \
    'o' ' Options -->' \
    's' ' System Info' \
    'p' ' Power Off' \
    2>/tmp/whiptail || recovery "GUI menu failed"

  option=$(cat /tmp/whiptail)
  case "$option" in 
    d )
      attempt_default_boot
      ;;
    r )
      update_totp && update_hotp
      ;;
    o )
      show_options_menu
      ;;
    s )
      show_system_info
      ;;
    p )
      poweroff
      ;;
  esac
}

show_options_menu()
{
  whiptail $BG_COLOR_MAIN_MENU --clear --title "HEADS Options" \
    --menu "" 20 90 10 \
    'b' ' Boot Options -->' \
    't' ' TPM/TOTP/HOTP Options -->' \
    'u' ' Update checksums and sign all files in /boot' \
    'c' ' Change configuration settings -->' \
    'f' ' Flash/Update the BIOS -->' \
    'g' ' GPG Options -->' \
    'F' ' OEM Factory Reset -->' \
    'x' ' Exit to recovery shell' \
    'r' ' <-- Return to main menu' \
    2>/tmp/whiptail || recovery "GUI menu failed"

  option=$(cat /tmp/whiptail)
  case "$option" in 
    b )
      show_boot_options_menu
      ;;
    t )
      show_tpm_totp_hotp_options_menu
      ;;
    u )
      prompt_update_checksums
      ;;
    c )
      config-gui.sh
      ;;
    f )
      flash-gui.sh
      ;;
    g )
      gpg-gui.sh
      ;;
    F )
      oem-factory-reset
      ;;
    x )
      recovery "User requested recovery shell"
      ;;
    r )
      ;;
  esac
}

show_boot_options_menu()
{
  whiptail $BG_COLOR_MAIN_MENU --clear --title "Boot Options" \
    --menu "Select A Boot Option" 20 90 10 \
    'm' ' Show OS boot menu' \
    'u' ' USB boot' \
    'i' ' Ignore tampering and force a boot (Unsafe!)' \
    'r' ' <-- Return to main menu' \
    2>/tmp/whiptail || recovery "GUI menu failed"

  option=$(cat /tmp/whiptail)
  case "$option" in 
    m )
      # select a kernel from the menu
      select_os_boot_option
      ;;
    u )
      exec /bin/usb-init
      ;;
    i )
      force_unsafe_boot
      ;;
    r )
      ;;
  esac
}

show_tpm_totp_hotp_options_menu()
{
  whiptail $BG_COLOR_MAIN_MENU --clear --title "TPM/TOTP/HOTP Options" \
    --menu "Select An Option" 20 90 10 \
    'g' ' Generate new TOTP/HOTP secret' \
    'r' ' Reset the TPM' \
    't' ' TOTP/HOTP does not match after refresh, troubleshoot' \
    'm' ' <-- Return to main menu' \
    2>/tmp/whiptail || recovery "GUI menu failed"

  option=$(cat /tmp/whiptail)
  case "$option" in 
    g )
      generate_totp_htop
      ;;
    r )
      reset_tpm
      ;;
    t )
      prompt_totp_mismatch
      ;;
    m )
      ;;
  esac
}

prompt_totp_mismatch()
{
  if (whiptail $BG_COLOR_WARNING --title "TOTP/HOTP code mismatched" \
    --yesno "TOTP/HOTP code mismatches could indicate either TPM tampering or clock drift:\n\nTo correct clock drift: 'date -s HH:MM:SS'\nand save it to the RTC: 'hwclock -w'\nthen reboot and try again.\n\nWould you like to exit to a recovery console?" 30 90) then
    echo ""
    echo "To correct clock drift: 'date -s HH:MM:SS'"
    echo "and save it to the RTC: 'hwclock -w'"
    echo "then reboot and try again"
    echo ""
    recovery "TOTP/HOTP mismatch"
  fi
}

reset_tpm()
{
  if [ "$CONFIG_TPM" = "y" ]; then
    if (whiptail $BG_COLOR_WARNING --title 'Reset the TPM' \
        --yesno "This will clear the TPM and TPM password, replace them with new ones!\n\nDo you want to proceed?" 16 90) then
      /bin/tpm-reset

      # now that the TPM is reset, remove invalid TPM counter files
      mount_boot
      mount -o rw,remount /boot
      rm -f /boot/kexec_rollback.txt

      # create Heads TPM counter before any others
      check_tpm_counter /boot/kexec_rollback.txt \
      || die "Unable to find/create tpm counter"
      counter="$TPM_COUNTER"

      increment_tpm_counter $counter \
      || die "Unable to increment tpm counter"

      sha256sum /tmp/counter-$counter > /boot/kexec_rollback.txt \
      || die "Unable to create rollback file"
      mount -o ro,remount /boot

      generate_totp_htop
    else
      echo "Returning to the main menu"
    fi
  else
    whiptail $BG_COLOR_ERROR --clear --title 'ERROR: No TPM Detected' --msgbox "This device does not have a TPM.\n\nPress OK to return to the Main Menu" 30 90
  fi
}

show_system_info()
{
  battery_charge="$(print_battery_charge)"
  battery_health="$(print_battery_health)"
  if [ -n $battery_charge -a -n $battery_health ];then
	  battery_status="\nBattery charge: $battery_charge%\nBattery health: $battery_health%\n"
  fi

  memtotal=$(cat /proc/meminfo | grep 'MemTotal' | tr -s ' ' | cut -f2 -d ' ')
  memtotal=$((${memtotal} / 1024 / 1024 + 1))
  cpustr=$(cat /proc/cpuinfo | grep 'model name' | uniq | sed -r 's/\(R\)//;s/\(TM\)//;s/CPU //;s/model name.*: //')
  kernel=$(uname -s -r)
  
  whiptail $BG_COLOR_MAIN_MENU --title 'System Info' \
    --msgbox "${BOARD_NAME}\n\nFW_VER: ${FW_VER}\nKernel: ${kernel}\n\nCPU: ${cpustr}\nRAM: ${memtotal} GB\n$battery_status\n$(fdisk -l | grep -e '/dev/sd.:' -e '/dev/nvme.*:' | sed 's/B,.*/B/')" 16 60
}

select_os_boot_option()
{
  mount_boot
  if verify_global_hashes ; then
    kexec-select-boot -m -b /boot -c "grub.cfg" -g
  fi
}

attempt_default_boot()
{
  mount_boot
    
  if ! verify_global_hashes; then
    return
  fi
  DEFAULT_FILE=`find /boot/kexec_default.*.txt 2>/dev/null | head -1`
  if [ -r "$DEFAULT_FILE" ]; then
    kexec-select-boot -b /boot -c "grub.cfg" -g \
    || recovery "Failed default boot"
  elif (whiptail $BG_COLOR_WARNING --title 'No Default Boot Option Configured' \
        --yesno "There is no default boot option configured yet.\nWould you like to load a menu of boot options?\nOtherwise you will return to the main menu." 16 90) then
    kexec-select-boot -m -b /boot -c "grub.cfg" -g
  fi
}

force_unsafe_boot()
{
  # Run the menu selection in "force" mode, bypassing hash checks
  if (whiptail $BG_COLOR_WARNING --title 'Unsafe Forced Boot Selected!' \
      --yesno "WARNING: You have chosen to skip all tamper checks and boot anyway.\n\nThis is an unsafe option!\n\nDo you want to proceed?" 16 90) then
    mount_boot && kexec-select-boot -m -b /boot -c "grub.cfg" -g -f
  fi
}

# gui-init start

# Use stored HOTP key branding
if [ -r /boot/kexec_hotp_key ]; then
	HOTPKEY_BRANDING="$(cat /boot/kexec_hotp_key)"
else
	HOTPKEY_BRANDING="HOTP USB Security Dongle"
fi

if detect_boot_device ; then
  # /boot device with installed OS found
  clean_boot_check
else
  # can't determine /boot device or no OS installed, 
  # so fall back to interactive selection
  mount_boot
fi

# detect whether any GPG keys exist in the keyring, if not, initialize that first
[[ "$skip_to_menu" != "true" ]] && check_gpg_key && update_totp && update_hotp

if [[ "$HOTP" = "Success" && $CONFIG_AUTO_BOOT_TIMEOUT ]]; then
  prompt_auto_default_boot
fi

while true; do
  show_main_menu
done

recovery "Something failed during boot"
